"""
Django settings for TheFarm project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import dj_database_url
from pathlib import Path
import os
import django_heroku


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
# BASE_DIRZ = os.path.dirname(os.path.dirname(
#     os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = ")x2v*^r!2im9!qga+$ml-m2ne2tgmqy#r*-%1m3ob0)bluy$yathiswashowwedidthefirstproject2020"
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY', 'm9!qga+$ml)x2v*^r!2i-mThebearingbesoright@1$8obt2_+&k3q+pmu)598sj6yjpkag')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'


ALLOWED_HOSTS = ["127.0.0.1", ".herokuapp.com", ]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'whitenoise.runserver_nostatic',
    "django.contrib.staticfiles",
    "accounts.apps.AccountsConfig",
    "django_filters",
    "crispy_forms",
    "tempus_dominus",
    "annoying",
]


CRISPY_TEMPLATE_PACK = "bootstrap4"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "TheFarm.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TheFarm.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'FARMLAND',
    #     'USER': 'postgres',
    #     'PASSWORD': 'Hoonigan22',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # }
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Heroku: Update database configuration from $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# STATIC_ROOT = "/var/www/example.com/static/"

# The URL to use when referring to static files (where they will be served from)
STATIC_URL = "/static/"

# Additional locations where static files may exist
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]


MEDIA_URL = '/images/'
MEDIA_ROOT = os.path.join(BASE_DIR, "/static/images")

# variable to set the use of whitenoise compression as the file storage engine
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# SMTP Configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "decapajo@gmail.com"
EMAIL_HOST_PASSWORD = "PASSWORD"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'root': {
        'level': 'WARNING',
        'handlers': ['all_file'],
    },

    'loggers': {
        'django': {
            'handlers': ['fileDEBUG', 'fileINFO'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.server': {
            'handlers': ['django_all'],
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['django_all'],
            'level': 'INFO',
        },
        'django.db.backends': {
            'handlers': ['django_all'],
            'level': 'DEBUG',
        }
    },

    'handlers': {
        'fileDEBUG': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': './logs/debug.log',
            'formatter': 'simpleRe',
        },
        'fileINFO': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './logs/debugINFO.log',
            'formatter': 'simpleReINFO',
        },
        'django_all': {
            # 'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './logs/django.log',
            # 'formatter': 'simpleReINFO',
        },
        'django_all': {
            # 'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './logs/djangofunc.log',
            'formatter': 'funct_formatter',
        },
        'all_file': {
            # 'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './logs/rootlogs.log',
            'formatter': 'funct_formatter',
        },
    },

    'formatters': {
        'simpleRe': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'simpleReINFO': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'funct_formatter': {
            'format': '[{pathname}:{funcName}:{lineno:d}] {message}',
            'style': '{',
        },
    },
}

# Setting default protocol
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"

# HSTP configuration for http and https
# SECURE_HSTS_SECONDS = None

# SECURE_HSTS_INCLUDE_SUBDOMAINS = False

# SECURE_HSTS_PRELOAD = False

# SECURE_CONTENT_TYPE_NOSNIFF = False
# SECURE_BROWSER_XSS_FILTER = False
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_PROXY_SSL_HEADER = None

# CSRF_TRUSTED_ORIGINS = ['https://morning-chamber-13981.herokuapp.com/']

# SSL redirect to https configuration
# SECURE_SSL_REDIRECT = False

# CSRF configuration
# CSRF_COOKIE_SECURE = False

# Session configuration
# SESSION_COOKIE_SECURE = False

# CORS_REPLACE_HTTPS_REFERER = False

# HOST_SCHEME = "http://"

# SECURE_FRAME_DENY = False


# Configuration for Django and Heroku
django_heroku.settings(locals())
